import { FilePaths } from 'data/FilePaths';
import { FileSystem } from 'scripts/utils/fsUtils';
import { getAllServers } from 'scripts/v2/info/allServers';
/**
 * Identifies servers that are hackable based on their security and economic attributes,
 * and records their names, sorted by potential profitability. This script first gathers all accessible servers,
 * excluding the starting point ("home"), and then checks each for hackability criteria:
 * root access, hacking level requirement, and the presence of money. It records the names of qualifying servers,
 * sorted by their maximum money capacity, to a file.
 * This script leverages a custom `FileSystem` class to handle file operations.
 */
export async function main(ns) {
    // Instantiate the FileSystem class for file operations, targeting a specific file for hackable targets.
    const HACKABLE_TARGETS_FILE = new FileSystem(ns, FilePaths.HACKABLE_TARGETS);
    const playerHackingLevel = ns.getHackingLevel();
    const hackableServers = getAllServers(ns)
        .filter(({ info }) => isHackable(info, playerHackingLevel))
        .sort(sortByMaxMoney);
    // Write the sorted list of hackable servers to the targeted file.
    await HACKABLE_TARGETS_FILE.write(hackableServers.map((s) => s.toJSON()));
}
const isHackable = (server, playerHackingLevel) => {
    return (!server.purchasedByPlayer &&
        server.hasAdminRights &&
        !!server.moneyMax &&
        (server.requiredHackingSkill ?? 0) <= playerHackingLevel);
};
const sortByMaxMoney = (a, b) => {
    return b.info.moneyMax - a.info.moneyMax;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja2FibGVTZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjcmlwdHMvdjIvaW5mby9oYWNrYWJsZVNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0Q7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDL0Isd0dBQXdHO0lBQ3hHLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ2hELE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxFQUFFLENBQUM7U0FDdEMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1NBQzFELElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV4QixrRUFBa0U7SUFDbEUsTUFBTSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM1RSxDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFjLEVBQUUsa0JBQTBCLEVBQVcsRUFBRTtJQUN6RSxPQUFPLENBQ0wsQ0FBQyxNQUFNLENBQUMsaUJBQWlCO1FBQ3pCLE1BQU0sQ0FBQyxjQUFjO1FBQ3JCLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUTtRQUNqQixDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLENBQUMsSUFBSSxrQkFBa0IsQ0FDekQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBYSxFQUFFLENBQWEsRUFBVSxFQUFFO0lBQzlELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFTLENBQUM7QUFDN0MsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMsIFNlcnZlciB9IGZyb20gJ0Bucyc7XG5pbXBvcnQgeyBGaWxlUGF0aHMgfSBmcm9tICdkYXRhL0ZpbGVQYXRocyc7XG5pbXBvcnQgeyBGaWxlU3lzdGVtIH0gZnJvbSAnc2NyaXB0cy91dGlscy9mc1V0aWxzJztcbmltcG9ydCB7IGdldEFsbFNlcnZlcnMgfSBmcm9tICdzY3JpcHRzL3YyL2luZm8vYWxsU2VydmVycyc7XG5pbXBvcnQgeyBTZXJ2ZXJOb2RlIH0gZnJvbSAnL2RhdGEvU2VydmVyTm9kZSc7XG4vKipcbiAqIElkZW50aWZpZXMgc2VydmVycyB0aGF0IGFyZSBoYWNrYWJsZSBiYXNlZCBvbiB0aGVpciBzZWN1cml0eSBhbmQgZWNvbm9taWMgYXR0cmlidXRlcyxcbiAqIGFuZCByZWNvcmRzIHRoZWlyIG5hbWVzLCBzb3J0ZWQgYnkgcG90ZW50aWFsIHByb2ZpdGFiaWxpdHkuIFRoaXMgc2NyaXB0IGZpcnN0IGdhdGhlcnMgYWxsIGFjY2Vzc2libGUgc2VydmVycyxcbiAqIGV4Y2x1ZGluZyB0aGUgc3RhcnRpbmcgcG9pbnQgKFwiaG9tZVwiKSwgYW5kIHRoZW4gY2hlY2tzIGVhY2ggZm9yIGhhY2thYmlsaXR5IGNyaXRlcmlhOlxuICogcm9vdCBhY2Nlc3MsIGhhY2tpbmcgbGV2ZWwgcmVxdWlyZW1lbnQsIGFuZCB0aGUgcHJlc2VuY2Ugb2YgbW9uZXkuIEl0IHJlY29yZHMgdGhlIG5hbWVzIG9mIHF1YWxpZnlpbmcgc2VydmVycyxcbiAqIHNvcnRlZCBieSB0aGVpciBtYXhpbXVtIG1vbmV5IGNhcGFjaXR5LCB0byBhIGZpbGUuXG4gKiBUaGlzIHNjcmlwdCBsZXZlcmFnZXMgYSBjdXN0b20gYEZpbGVTeXN0ZW1gIGNsYXNzIHRvIGhhbmRsZSBmaWxlIG9wZXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAvLyBJbnN0YW50aWF0ZSB0aGUgRmlsZVN5c3RlbSBjbGFzcyBmb3IgZmlsZSBvcGVyYXRpb25zLCB0YXJnZXRpbmcgYSBzcGVjaWZpYyBmaWxlIGZvciBoYWNrYWJsZSB0YXJnZXRzLlxuICBjb25zdCBIQUNLQUJMRV9UQVJHRVRTX0ZJTEUgPSBuZXcgRmlsZVN5c3RlbShucywgRmlsZVBhdGhzLkhBQ0tBQkxFX1RBUkdFVFMpO1xuICBjb25zdCBwbGF5ZXJIYWNraW5nTGV2ZWwgPSBucy5nZXRIYWNraW5nTGV2ZWwoKTtcbiAgY29uc3QgaGFja2FibGVTZXJ2ZXJzID0gZ2V0QWxsU2VydmVycyhucylcbiAgICAuZmlsdGVyKCh7IGluZm8gfSkgPT4gaXNIYWNrYWJsZShpbmZvLCBwbGF5ZXJIYWNraW5nTGV2ZWwpKVxuICAgIC5zb3J0KHNvcnRCeU1heE1vbmV5KTtcblxuICAvLyBXcml0ZSB0aGUgc29ydGVkIGxpc3Qgb2YgaGFja2FibGUgc2VydmVycyB0byB0aGUgdGFyZ2V0ZWQgZmlsZS5cbiAgYXdhaXQgSEFDS0FCTEVfVEFSR0VUU19GSUxFLndyaXRlKGhhY2thYmxlU2VydmVycy5tYXAoKHMpID0+IHMudG9KU09OKCkpKTtcbn1cblxuY29uc3QgaXNIYWNrYWJsZSA9IChzZXJ2ZXI6IFNlcnZlciwgcGxheWVySGFja2luZ0xldmVsOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIChcbiAgICAhc2VydmVyLnB1cmNoYXNlZEJ5UGxheWVyICYmXG4gICAgc2VydmVyLmhhc0FkbWluUmlnaHRzICYmXG4gICAgISFzZXJ2ZXIubW9uZXlNYXggJiZcbiAgICAoc2VydmVyLnJlcXVpcmVkSGFja2luZ1NraWxsID8/IDApIDw9IHBsYXllckhhY2tpbmdMZXZlbFxuICApO1xufTtcblxuY29uc3Qgc29ydEJ5TWF4TW9uZXkgPSAoYTogU2VydmVyTm9kZSwgYjogU2VydmVyTm9kZSk6IG51bWJlciA9PiB7XG4gIHJldHVybiBiLmluZm8ubW9uZXlNYXghIC0gYS5pbmZvLm1vbmV5TWF4ITtcbn07XG4iXX0=