import { FilePaths } from 'data/FilePaths';
import { ServerNode } from 'data/ServerNode';
import { FileSystem } from 'scripts/utils/fsUtils';
export async function main(ns) {
    const ALL_SERVERS = new FileSystem(ns, FilePaths.ALL_SERVERS);
    const servers = getAllServers(ns);
    await ALL_SERVERS.write(JSON.stringify(servers.map((server) => server.toJSON())));
    return;
}
export const getAllServers = (ns) => {
    const rootServer = new ServerNode(ns, ns.getHostname(), null);
    const allServers = [];
    const stack = [rootServer];
    while (stack.length) {
        const current = stack.pop();
        stack.push(...current.children.filter((child) => !isDuplicated(allServers, child)));
        allServers.push(current);
    }
    return allServers;
};
const isDuplicated = (existing, target) => {
    return existing.findIndex((server) => target.name === server.name) !== -1;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsU2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY3JpcHRzL3YyL2luZm8vYWxsU2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVuRCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQy9CLE1BQU0sV0FBVyxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUQsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sV0FBVyxDQUFDLEtBQUssQ0FDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUN6RCxDQUFDO0lBQ0YsT0FBTztBQUNULENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFNLEVBQWdCLEVBQUU7SUFDcEQsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RCxNQUFNLFVBQVUsR0FBaUIsRUFBRSxDQUFDO0lBRXBDLE1BQU0sS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0IsT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ25CLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUcsQ0FBQztRQUM3QixLQUFLLENBQUMsSUFBSSxDQUNSLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUN4RSxDQUFDO1FBQ0YsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMxQjtJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsUUFBc0IsRUFBRSxNQUFrQixFQUFXLEVBQUU7SUFDM0UsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUM1RSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XG5pbXBvcnQgeyBGaWxlUGF0aHMgfSBmcm9tICdkYXRhL0ZpbGVQYXRocyc7XG5pbXBvcnQgeyBTZXJ2ZXJOb2RlIH0gZnJvbSAnZGF0YS9TZXJ2ZXJOb2RlJztcbmltcG9ydCB7IEZpbGVTeXN0ZW0gfSBmcm9tICdzY3JpcHRzL3V0aWxzL2ZzVXRpbHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgY29uc3QgQUxMX1NFUlZFUlMgPSBuZXcgRmlsZVN5c3RlbShucywgRmlsZVBhdGhzLkFMTF9TRVJWRVJTKTtcbiAgY29uc3Qgc2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpO1xuICBhd2FpdCBBTExfU0VSVkVSUy53cml0ZShcbiAgICBKU09OLnN0cmluZ2lmeShzZXJ2ZXJzLm1hcCgoc2VydmVyKSA9PiBzZXJ2ZXIudG9KU09OKCkpKVxuICApO1xuICByZXR1cm47XG59XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxTZXJ2ZXJzID0gKG5zOiBOUyk6IFNlcnZlck5vZGVbXSA9PiB7XG4gIGNvbnN0IHJvb3RTZXJ2ZXIgPSBuZXcgU2VydmVyTm9kZShucywgbnMuZ2V0SG9zdG5hbWUoKSwgbnVsbCk7XG4gIGNvbnN0IGFsbFNlcnZlcnM6IFNlcnZlck5vZGVbXSA9IFtdO1xuXG4gIGNvbnN0IHN0YWNrID0gW3Jvb3RTZXJ2ZXJdO1xuICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7XG4gICAgY29uc3QgY3VycmVudCA9IHN0YWNrLnBvcCgpITtcbiAgICBzdGFjay5wdXNoKFxuICAgICAgLi4uY3VycmVudC5jaGlsZHJlbi5maWx0ZXIoKGNoaWxkKSA9PiAhaXNEdXBsaWNhdGVkKGFsbFNlcnZlcnMsIGNoaWxkKSlcbiAgICApO1xuICAgIGFsbFNlcnZlcnMucHVzaChjdXJyZW50KTtcbiAgfVxuICByZXR1cm4gYWxsU2VydmVycztcbn07XG5cbmNvbnN0IGlzRHVwbGljYXRlZCA9IChleGlzdGluZzogU2VydmVyTm9kZVtdLCB0YXJnZXQ6IFNlcnZlck5vZGUpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIGV4aXN0aW5nLmZpbmRJbmRleCgoc2VydmVyKSA9PiB0YXJnZXQubmFtZSA9PT0gc2VydmVyLm5hbWUpICE9PSAtMTtcbn07XG4iXX0=