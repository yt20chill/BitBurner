import { HWGWFiles } from 'data/FilePaths';
import { promisify } from 'scripts/utils/promiseUtils';
import { getAllServers } from 'scripts/v2/info/allServers';
/**
 * Automates the process of hacking servers by deploying scripts and cracking open their security.
 * The script first gathers all servers accessible from the starting point ("home"). It then attempts
 * to breach the servers' security using available hacking programs and, if successful, deploys hacking scripts
 * to the compromised servers. This enables automated hacking activities on those servers.
 */
export async function main(ns) {
    // Define the available hacking programs and their corresponding action functions.
    const PROGRAMS = [
        { file: 'BruteSSH.exe', action: ns.brutessh },
        { file: 'FTPCrack.exe', action: ns.ftpcrack },
        { file: 'RelaySMTP.exe', action: ns.relaysmtp },
        { file: 'HTTPWorm.exe', action: ns.httpworm },
        { file: 'SQLInject.exe', action: ns.sqlinject },
    ];
    const ownedPrograms = PROGRAMS.filter((program) => ns.fileExists(program.file));
    const allServers = getAllServers(ns).map((s) => s.info);
    for (const server of allServers) {
        await deployHackingScripts(ns, server);
        root(ns, server, ownedPrograms.slice());
    }
}
const deployHackingScripts = async (ns, server) => {
    await promisify(ns.scp, [HWGWFiles.WEAKEN, HWGWFiles.GROW, HWGWFiles.HACK], server.hostname);
    return;
};
const getRequiredPorts = (server) => {
    return server.numOpenPortsRequired ?? 0;
};
const root = (ns, server, ownedPrograms) => {
    if (server.hasAdminRights ||
        getRequiredPorts(server) > ownedPrograms.length) {
        return;
    }
    ownedPrograms.forEach((program) => {
        program.action(server.hostname);
    });
    ns.nuke(server.hostname);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2NyaXB0cy92Mi9oYWNrL2RlcGxveWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBUzNEOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixrRkFBa0Y7SUFDbEYsTUFBTSxRQUFRLEdBQUc7UUFDZixFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFDN0MsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQzdDLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRTtRQUMvQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFDN0MsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFO0tBQ3ZDLENBQUM7SUFFWCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDaEQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQzVCLENBQUM7SUFDRixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLEVBQUU7UUFDL0IsTUFBTSxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDekM7QUFDSCxDQUFDO0FBRUQsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLEVBQUUsRUFBTSxFQUFFLE1BQWMsRUFBaUIsRUFBRTtJQUMzRSxNQUFNLFNBQVMsQ0FDYixFQUFFLENBQUMsR0FBRyxFQUNOLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDbEQsTUFBTSxDQUFDLFFBQVEsQ0FDaEIsQ0FBQztJQUNGLE9BQU87QUFDVCxDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLENBQUMsTUFBYyxFQUFVLEVBQUU7SUFDbEQsT0FBTyxNQUFNLENBQUMsb0JBQW9CLElBQUksQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQztBQUVGLE1BQU0sSUFBSSxHQUFHLENBQ1gsRUFBTSxFQUNOLE1BQWMsRUFDZCxhQUFpRCxFQUMzQyxFQUFFO0lBQ1IsSUFDRSxNQUFNLENBQUMsY0FBYztRQUNyQixnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxFQUMvQztRQUNBLE9BQU87S0FDUjtJQUVELGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNoQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TLCBTZXJ2ZXIgfSBmcm9tICdAbnMnO1xuaW1wb3J0IHsgSFdHV0ZpbGVzIH0gZnJvbSAnZGF0YS9GaWxlUGF0aHMnO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAnc2NyaXB0cy91dGlscy9wcm9taXNlVXRpbHMnO1xuaW1wb3J0IHsgZ2V0QWxsU2VydmVycyB9IGZyb20gJ3NjcmlwdHMvdjIvaW5mby9hbGxTZXJ2ZXJzJztcblxudHlwZSBBY3Rpb24gPVxuICB8IE5TWydicnV0ZXNzaCddXG4gIHwgTlNbJ2Z0cGNyYWNrJ11cbiAgfCBOU1sncmVsYXlzbXRwJ11cbiAgfCBOU1snaHR0cHdvcm0nXVxuICB8IE5TWydzcWxpbmplY3QnXTtcblxuLyoqXG4gKiBBdXRvbWF0ZXMgdGhlIHByb2Nlc3Mgb2YgaGFja2luZyBzZXJ2ZXJzIGJ5IGRlcGxveWluZyBzY3JpcHRzIGFuZCBjcmFja2luZyBvcGVuIHRoZWlyIHNlY3VyaXR5LlxuICogVGhlIHNjcmlwdCBmaXJzdCBnYXRoZXJzIGFsbCBzZXJ2ZXJzIGFjY2Vzc2libGUgZnJvbSB0aGUgc3RhcnRpbmcgcG9pbnQgKFwiaG9tZVwiKS4gSXQgdGhlbiBhdHRlbXB0c1xuICogdG8gYnJlYWNoIHRoZSBzZXJ2ZXJzJyBzZWN1cml0eSB1c2luZyBhdmFpbGFibGUgaGFja2luZyBwcm9ncmFtcyBhbmQsIGlmIHN1Y2Nlc3NmdWwsIGRlcGxveXMgaGFja2luZyBzY3JpcHRzXG4gKiB0byB0aGUgY29tcHJvbWlzZWQgc2VydmVycy4gVGhpcyBlbmFibGVzIGF1dG9tYXRlZCBoYWNraW5nIGFjdGl2aXRpZXMgb24gdGhvc2Ugc2VydmVycy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XG4gIC8vIERlZmluZSB0aGUgYXZhaWxhYmxlIGhhY2tpbmcgcHJvZ3JhbXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgYWN0aW9uIGZ1bmN0aW9ucy5cbiAgY29uc3QgUFJPR1JBTVMgPSBbXG4gICAgeyBmaWxlOiAnQnJ1dGVTU0guZXhlJywgYWN0aW9uOiBucy5icnV0ZXNzaCB9LFxuICAgIHsgZmlsZTogJ0ZUUENyYWNrLmV4ZScsIGFjdGlvbjogbnMuZnRwY3JhY2sgfSxcbiAgICB7IGZpbGU6ICdSZWxheVNNVFAuZXhlJywgYWN0aW9uOiBucy5yZWxheXNtdHAgfSxcbiAgICB7IGZpbGU6ICdIVFRQV29ybS5leGUnLCBhY3Rpb246IG5zLmh0dHB3b3JtIH0sXG4gICAgeyBmaWxlOiAnU1FMSW5qZWN0LmV4ZScsIGFjdGlvbjogbnMuc3FsaW5qZWN0IH0sXG4gIF0gYXMgY29uc3Q7XG5cbiAgY29uc3Qgb3duZWRQcm9ncmFtcyA9IFBST0dSQU1TLmZpbHRlcigocHJvZ3JhbSkgPT5cbiAgICBucy5maWxlRXhpc3RzKHByb2dyYW0uZmlsZSlcbiAgKTtcbiAgY29uc3QgYWxsU2VydmVycyA9IGdldEFsbFNlcnZlcnMobnMpLm1hcCgocykgPT4gcy5pbmZvKTtcblxuICBmb3IgKGNvbnN0IHNlcnZlciBvZiBhbGxTZXJ2ZXJzKSB7XG4gICAgYXdhaXQgZGVwbG95SGFja2luZ1NjcmlwdHMobnMsIHNlcnZlcik7XG4gICAgcm9vdChucywgc2VydmVyLCBvd25lZFByb2dyYW1zLnNsaWNlKCkpO1xuICB9XG59XG5cbmNvbnN0IGRlcGxveUhhY2tpbmdTY3JpcHRzID0gYXN5bmMgKG5zOiBOUywgc2VydmVyOiBTZXJ2ZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgYXdhaXQgcHJvbWlzaWZ5KFxuICAgIG5zLnNjcCxcbiAgICBbSFdHV0ZpbGVzLldFQUtFTiwgSFdHV0ZpbGVzLkdST1csIEhXR1dGaWxlcy5IQUNLXSxcbiAgICBzZXJ2ZXIuaG9zdG5hbWVcbiAgKTtcbiAgcmV0dXJuO1xufTtcblxuY29uc3QgZ2V0UmVxdWlyZWRQb3J0cyA9IChzZXJ2ZXI6IFNlcnZlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBzZXJ2ZXIubnVtT3BlblBvcnRzUmVxdWlyZWQgPz8gMDtcbn07XG5cbmNvbnN0IHJvb3QgPSAoXG4gIG5zOiBOUyxcbiAgc2VydmVyOiBTZXJ2ZXIsXG4gIG93bmVkUHJvZ3JhbXM6IHsgZmlsZTogc3RyaW5nOyBhY3Rpb246IEFjdGlvbiB9W11cbik6IHZvaWQgPT4ge1xuICBpZiAoXG4gICAgc2VydmVyLmhhc0FkbWluUmlnaHRzIHx8XG4gICAgZ2V0UmVxdWlyZWRQb3J0cyhzZXJ2ZXIpID4gb3duZWRQcm9ncmFtcy5sZW5ndGhcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3duZWRQcm9ncmFtcy5mb3JFYWNoKChwcm9ncmFtKSA9PiB7XG4gICAgcHJvZ3JhbS5hY3Rpb24oc2VydmVyLmhvc3RuYW1lKTtcbiAgfSk7XG5cbiAgbnMubnVrZShzZXJ2ZXIuaG9zdG5hbWUpO1xufTtcbiJdfQ==