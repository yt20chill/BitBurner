export const getAvailableRam = (server, reserveHomeRam) => {
    return (server.maxRam -
        server.ramUsed -
        (server.hostname === 'home' ? reserveHomeRam : 0));
};
export const optimalHackThreads = (hackPercentagePerThread, hackThreads) => {
    return hackPercentagePerThread * hackThreads > 1
        ? Math.ceil(1 / hackPercentagePerThread)
        : hackThreads;
};
export const calculateGrowthThreads = ({ ns, targetName, hackPercentagePerThread, hackThreads, cpuCores, }) => {
    // Calculate the target percentage of money to hack. Max = 99% to avoid 0 division or -ve
    const targetHackPercentage = Math.min(0.99, hackPercentagePerThread * hackThreads);
    const remainingPercentage = 1 - targetHackPercentage;
    // get the num of threads to grow back to original money after hack
    const growthFactorAfterHack = 1 / remainingPercentage;
    return Math.ceil(ns.growthAnalyze(targetName, growthFactorAfterHack, cpuCores));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja0xvb3BVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY3JpcHRzL3YyL2hhY2svaGFja0xvb3BVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FDN0IsTUFBYyxFQUNkLGNBQXNCLEVBQ2QsRUFBRTtJQUNWLE9BQU8sQ0FDTCxNQUFNLENBQUMsTUFBTTtRQUNiLE1BQU0sQ0FBQyxPQUFPO1FBQ2QsQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQ2hDLHVCQUErQixFQUMvQixXQUFtQixFQUNYLEVBQUU7SUFDVixPQUFPLHVCQUF1QixHQUFHLFdBQVcsR0FBRyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyx1QkFBdUIsQ0FBQztRQUN4QyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQVVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsRUFDckMsRUFBRSxFQUNGLFVBQVUsRUFDVix1QkFBdUIsRUFDdkIsV0FBVyxFQUNYLFFBQVEsR0FDVyxFQUFVLEVBQUU7SUFDL0IseUZBQXlGO0lBQ3pGLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDbkMsSUFBSSxFQUNKLHVCQUF1QixHQUFHLFdBQVcsQ0FDdEMsQ0FBQztJQUNGLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxHQUFHLG9CQUFvQixDQUFDO0lBQ3JELG1FQUFtRTtJQUNuRSxNQUFNLHFCQUFxQixHQUFHLENBQUMsR0FBRyxtQkFBbUIsQ0FBQztJQUN0RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQ2QsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxDQUFDLENBQzlELENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUywgU2VydmVyIH0gZnJvbSAnQG5zJztcblxuZXhwb3J0IGNvbnN0IGdldEF2YWlsYWJsZVJhbSA9IChcbiAgc2VydmVyOiBTZXJ2ZXIsXG4gIHJlc2VydmVIb21lUmFtOiBudW1iZXJcbik6IG51bWJlciA9PiB7XG4gIHJldHVybiAoXG4gICAgc2VydmVyLm1heFJhbSAtXG4gICAgc2VydmVyLnJhbVVzZWQgLVxuICAgIChzZXJ2ZXIuaG9zdG5hbWUgPT09ICdob21lJyA/IHJlc2VydmVIb21lUmFtIDogMClcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBvcHRpbWFsSGFja1RocmVhZHMgPSAoXG4gIGhhY2tQZXJjZW50YWdlUGVyVGhyZWFkOiBudW1iZXIsXG4gIGhhY2tUaHJlYWRzOiBudW1iZXJcbik6IG51bWJlciA9PiB7XG4gIHJldHVybiBoYWNrUGVyY2VudGFnZVBlclRocmVhZCAqIGhhY2tUaHJlYWRzID4gMVxuICAgID8gTWF0aC5jZWlsKDEgLyBoYWNrUGVyY2VudGFnZVBlclRocmVhZClcbiAgICA6IGhhY2tUaHJlYWRzO1xufTtcblxudHlwZSBHcm93dGhUaHJlYWRzUGFyYW0gPSB7XG4gIG5zOiBOUztcbiAgdGFyZ2V0TmFtZTogc3RyaW5nO1xuICBoYWNrUGVyY2VudGFnZVBlclRocmVhZDogbnVtYmVyO1xuICBoYWNrVGhyZWFkczogbnVtYmVyO1xuICBjcHVDb3JlczogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUdyb3d0aFRocmVhZHMgPSAoe1xuICBucyxcbiAgdGFyZ2V0TmFtZSxcbiAgaGFja1BlcmNlbnRhZ2VQZXJUaHJlYWQsXG4gIGhhY2tUaHJlYWRzLFxuICBjcHVDb3Jlcyxcbn06IEdyb3d0aFRocmVhZHNQYXJhbSk6IG51bWJlciA9PiB7XG4gIC8vIENhbGN1bGF0ZSB0aGUgdGFyZ2V0IHBlcmNlbnRhZ2Ugb2YgbW9uZXkgdG8gaGFjay4gTWF4ID0gOTklIHRvIGF2b2lkIDAgZGl2aXNpb24gb3IgLXZlXG4gIGNvbnN0IHRhcmdldEhhY2tQZXJjZW50YWdlID0gTWF0aC5taW4oXG4gICAgMC45OSxcbiAgICBoYWNrUGVyY2VudGFnZVBlclRocmVhZCAqIGhhY2tUaHJlYWRzXG4gICk7XG4gIGNvbnN0IHJlbWFpbmluZ1BlcmNlbnRhZ2UgPSAxIC0gdGFyZ2V0SGFja1BlcmNlbnRhZ2U7XG4gIC8vIGdldCB0aGUgbnVtIG9mIHRocmVhZHMgdG8gZ3JvdyBiYWNrIHRvIG9yaWdpbmFsIG1vbmV5IGFmdGVyIGhhY2tcbiAgY29uc3QgZ3Jvd3RoRmFjdG9yQWZ0ZXJIYWNrID0gMSAvIHJlbWFpbmluZ1BlcmNlbnRhZ2U7XG4gIHJldHVybiBNYXRoLmNlaWwoXG4gICAgbnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXROYW1lLCBncm93dGhGYWN0b3JBZnRlckhhY2ssIGNwdUNvcmVzKVxuICApO1xufTtcbiJdfQ==